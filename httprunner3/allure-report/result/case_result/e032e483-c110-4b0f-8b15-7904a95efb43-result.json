{"name": "【广告配置】——查询广告标题", "status": "skipped", "statusDetails": {"message": "XFAIL reason: \n\n_pytest.outcomes.XFailed: <XFailed instance>", "trace": "self = <common.validate.JsonPath object at 0x0000018ADCB20B80>\nactual = 'preer广告', expect = 'pre广告', response = <Response [200]>\n\n    def handler(self, actual, expect, response):\n        if actual.startswith('$'):\n            if re.findall(r'\\$[a-zA-Z](.*?){', actual):\n                actual = re.findall('{(.*?)}', actual)[0]\n                actual = str(jsonpath.jsonpath(response.json(), actual)[0])[:-3]\n            else:\n                actual = jsonpath.jsonpath(response.json(), actual)[0]\n            try:\n>               assert expect.__str__() in actual.__str__()\nE               AssertionError\n\ncommon\\validate.py:56: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_case.test_case.TestClass object at 0x0000018ADCB5BC40>\napi_data = {'allure': {'allure_descrption': '【广告配置】——查询广告标题', 'allure_feature': '管理端', 'allure_story': '考试模块', 'allure_sub_suite'...uri': 'exam/banners'}, 'method': 'GET', 'params': {'page': 1, 'pageSize': 10}, 'url': '/api/v1/exam/banner/page'}, ...}\n\n    @pytest.mark.parametrize('api_data', ReadData().return_data())\n    def test_run(self, api_data):\n        \"\"\"\n        :param api_data\n        :return: report_content\n        \"\"\"\n    \n        \"\"\"数据处理\"\"\"\n        request_data = eval(self.deal_with.replace_(api_data['request']))\n        request_data['url'] = self.file['ent_url'] + request_data['url']\n        if request_data.get('files'):\n            request_data['files'] = data_depend.file_depend(request_data)\n        if request_data['headers'].get('content-type') and 'urlencoded' in request_data['headers']['content-type']:\n            request_data['data'] = urlencode(request_data['data'])\n        allure_(api_data)\n    \n        \"\"\"日志输出\"\"\"\n        response = requests.session().request(**request_data)\n        get_req_resp_record(response)\n    \n        \"\"\"sql执行\"\"\"\n        sql_statement = api_data.get('sql_statement')\n        if sql_statement:\n            [MysqlOperate(value[0]).execute_sql(value[1], self.deal_with) for sql in sql_statement\n             for value in sql.values()]\n    \n        \"\"\"参数提取\"\"\"\n        extract = api_data.get('extract')\n        if extract:\n            [self.deal_with.extract_(key, value, response, self.deal_with) for key, value in extract.items()]\n    \n        \"\"\"响应断言\"\"\"\n        validate = api_data.get('validate')\n        if validate:\n>           [self.validate.validate_(value[0], value[1], response, self.deal_with) for validate_dict in validate\n             for key, value in validate_dict.items()]\n\ntest_case\\test_case.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_case\\test_case.py:66: in <listcomp>\n    [self.validate.validate_(value[0], value[1], response, self.deal_with) for validate_dict in validate\ncommon\\validate.py:31: in validate_\n    self.judge.handler(actual, expect, response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.validate.JsonPath object at 0x0000018ADCB20B80>\nactual = 'preer广告', expect = 'pre广告', response = <Response [200]>\n\n    def handler(self, actual, expect, response):\n        if actual.startswith('$'):\n            if re.findall(r'\\$[a-zA-Z](.*?){', actual):\n                actual = re.findall('{(.*?)}', actual)[0]\n                actual = str(jsonpath.jsonpath(response.json(), actual)[0])[:-3]\n            else:\n                actual = jsonpath.jsonpath(response.json(), actual)[0]\n            try:\n                assert expect.__str__() in actual.__str__()\n                logger.info(f\"响应断言： 预期值：'{expect}' 实际值：'{actual}', 断言成功!\")\n            except AssertionError:\n                logger.info(f'断言失败：{AssertionError}')\n>               pytest.xfail('')\nE               _pytest.outcomes.XFailed: <XFailed instance>\n\ncommon\\validate.py:60: XFailed"}, "attachments": [{"name": "log", "source": "7908de9a-8136-4aef-ac79-fc374a2d77b0-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "34a853e9-2866-44f7-8aa4-46c5cd09112b-attachment.txt", "type": "text/plain"}], "start": 1636368891777, "stop": 1636368891853, "uuid": "e35ca119-4d5c-434f-a63a-acef934257a9", "historyId": "fffb3098ba104bbeb19c262ee38b7a2f", "testCaseId": "1bdc9a45fb40975afe3f97ac65201407", "fullName": "test_case.test_case.TestClass#test_run", "labels": [{"name": "suite", "value": "【广告配置】——查询广告标题"}, {"name": "subSuite", "value": "考试模块"}, {"name": "feature", "value": "管理端"}, {"name": "story", "value": "考试模块"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_case"}, {"name": "subSuite", "value": "TestClass"}, {"name": "host", "value": "SZLX"}, {"name": "thread", "value": "18288-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_case"}], "links": [{"type": "link", "url": "/api/v1/exam/banner/page", "name": "/api/v1/exam/banner/page"}]}