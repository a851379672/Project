{"name": "test_run[api_data63]", "status": "broken", "statusDetails": {"message": "TypeError: replace() argument 2 must be str, not None", "trace": "self = <test_case.test_case.TestClass object at 0x0000020574709190>\napi_data = {'allure': {'allure_descrption': '【广告配置】——广告排序', 'allure_feature': '管理端', 'allure_story': '考试模块', 'allure_sub_suite': ...lencoded; charset=UTF-8', 'uri': 'exam/banners'}, 'method': 'PUT', 'url': 'api/v1/exam/banner/sort/${bannersId}'}, ...}\n\n    @pytest.mark.parametrize('api_data', ReadData().return_data())\n    def test_run(self, api_data):\n        \"\"\"\n        :param api_data\n        :return: report_content\n        \"\"\"\n    \n        \"\"\"数据处理\"\"\"\n>       request_data = eval(self.deal_with.replace_(api_data['request']))\n\ntest_case\\test_case.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\data_depend.py:52: in replace_\n    replace_copy = self.get_replace(keys1, replace_copy)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.data_depend.DataDepend object at 0x0000020574732A30>\nkeys = ['bannersId', 'access_token', 'bannersId', 'ent_name']\nreplace_data = \"{'url': 'api/v1/exam/banner/sort/${bannersId}', 'method': 'PUT', 'headers': {'Authorization': 'Bearer__${access_token...cation/x-www-form-urlencoded; charset=UTF-8'}, 'data': {'id': '${bannersId}', 'sort': '2', 'title': '${ent_name}广告2'}}\"\n\n    def get_replace(self, keys, replace_data):\n        \"\"\"\n        :param keys: keys\n        :param replace_data: replace_data\n        :return:\n        \"\"\"\n        for key in keys:\n            if self.image_file(keys[-1]):\n                #   图片加密转换\n                replace_data = self.image_depend(keys[1], key, replace_data)\n                break\n            if key.startswith('$'):\n                #   获取方法集合、倒序排序\n                func_gather = re.findall(r'\\$(.*?){', key)[::-1]\n                func = func_gather[1]\n                if len(func_gather) > 1:\n                    #   方法抽取及参数处理\n                    func_replace = re.findall('{(.*?)}', re.findall('{(.*?)}', key)[0] + '}')[0]\n                    objects = self.in_getattr_(func)\n                    func_params = self.getattr_(objects, func_gather[0], func_replace)\n                else:\n                    func_params = None\n                if self.in_getattr_(func):\n                    objects = self.in_getattr_(func)\n                    value = self.getattr_(objects, func, func_params)\n                else:\n                    objects = self.in_getattr_(func)\n                    value = self.getattr_(objects, key)\n                replace_data = replace_data.replace(replace_data, value.__str__())\n            elif self.in_getattr_(key):\n                objects = self.in_getattr_(key)\n                if len(keys) > 1:\n                    value = self.getattr_(objects, key, keys[1])\n                    replace_data = replace_data.replace('$' + key + '{' + keys[1] + '}', value.__str__())\n                else:\n                    value = self.getattr_(objects, key)\n                    replace_data = replace_data.replace('$' + key + '{}', value.__str__())\n                break\n            else:\n                value = self.dicts.get(key)\n>               replace_data = replace_data.replace('${' + key + '}', value)\nE               TypeError: replace() argument 2 must be str, not None\n\ncommon\\data_depend.py:106: TypeError"}, "start": 1636451241983, "stop": 1636451241983, "uuid": "9c2a3ba9-e859-4c4a-be94-384718daa3b0", "historyId": "f01f3e7e14ab7226e519342af5eb058f", "testCaseId": "1bdc9a45fb40975afe3f97ac65201407", "fullName": "test_case.test_case.TestClass#test_run", "labels": [{"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_case"}, {"name": "subSuite", "value": "TestClass"}, {"name": "host", "value": "SZLX"}, {"name": "thread", "value": "5272-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_case"}]}