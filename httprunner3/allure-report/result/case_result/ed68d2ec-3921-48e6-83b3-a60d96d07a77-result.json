{"name": "【公告配置】——新增公告", "status": "broken", "statusDetails": {"message": "TypeError: 'bool' object is not subscriptable", "trace": "self = <test_case.test_case.TestClass object at 0x000002D423A0CB80>\napi_data = {'allure': {'allure_descrption': '【公告配置】——新增公告', 'allure_feature': '管理端', 'allure_story': '考试模块', 'allure_sub_suite': ..., 'uri': 'exam/notices'}, 'method': 'POST', 'url': 'http://pre-202108-10.zhixueyun.com/api/v1/exam/announcement'}, ...}\n\n    @pytest.mark.parametrize('api_data', ReadData().return_data())\n    def test_run(self, api_data):\n        \"\"\"\n        :param api_data\n        :return: report_content\n        \"\"\"\n    \n        \"\"\"数据处理\"\"\"\n        request_data = eval(self.deal_with.replace_(api_data['request']))\n        if request_data['headers'].get('content-type') and 'urlencoded' in request_data['headers']:\n            request_data['data'] = urlencode(request_data['data'])\n        if request_data.get('files'):\n            file_name = request_data['files']['file']\n            file_path = os.path.join(FILE_PATH, file_name)\n            if len(request_data['files']) == 1:\n                request_data['files'] = {'file': open(file_path, 'rb')}\n            else:\n                file_params = {key: (None, value) for key, value in request_data['files'].items() if key != 'file'}\n                file_params.update({'file': (file_name, open(file_path, 'rb'))})\n                request_data['files'] = file_params\n        allure_(api_data)\n    \n        \"\"\"日志输出\"\"\"\n        response = requests.session().request(**request_data)\n        get_req_resp_record(response)\n    \n        \"\"\"sql执行\"\"\"\n        sql_statement = api_data.get('sql_statement')\n        if sql_statement:\n            [MysqlOperate(value[0]).execute_sql(value[1], self.deal_with) for sql in sql_statement for value in sql.values()]\n    \n        \"\"\"参数提取\"\"\"\n        extract = api_data.get('extract')\n        if extract:\n            [self.deal_with.extract_(key, value, response, self.deal_with) for key, value in extract.items()]\n    \n        \"\"\"响应断言\"\"\"\n        validate = api_data.get('validate')\n        if validate:\n>           [self.validate.validate_(value[0], value[1], response, self.deal_with) for validate_dict in validate\n             for key, value in validate_dict.items()]\n\ntest_case\\test_case.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_case\\test_case.py:68: in <listcomp>\n    [self.validate.validate_(value[0], value[1], response, self.deal_with) for validate_dict in validate\ncommon\\validate.py:30: in validate_\n    self.judge.handler(actual, expect, response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.validate.JsonPath object at 0x000002D4237D4E20>\nactual = '$.title,', expect = 'pre公告1', response = <Response [500]>\n\n    def handler(self, actual, expect, response):\n        if actual.startswith('$'):\n            if re.findall(r'\\$[a-zA-Z](.*?){', actual):\n                actual = re.findall('{(.*?)}', actual)[0]\n                actual = str(jsonpath.jsonpath(response.json(), actual)[0])[:-3]\n            else:\n>               actual = jsonpath.jsonpath(response.json(), actual)[0]\nE               TypeError: 'bool' object is not subscriptable\n\ncommon\\validate.py:53: TypeError"}, "attachments": [{"name": "log", "source": "12fdc410-23a6-46a7-8306-ce818699b880-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "d7d9d1ce-bb6e-4392-a458-b0eb8871552a-attachment.txt", "type": "text/plain"}], "start": 1634806815044, "stop": 1634806815132, "uuid": "89c251b6-93c8-4765-9feb-bc827b4d113b", "historyId": "73016a8d52d96929e74e2972185441bc", "testCaseId": "1bdc9a45fb40975afe3f97ac65201407", "fullName": "test_case.test_case.TestClass#test_run", "labels": [{"name": "suite", "value": "【公告配置】——新增公告"}, {"name": "subSuite", "value": "考试公告"}, {"name": "feature", "value": "管理端"}, {"name": "story", "value": "考试模块"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_case"}, {"name": "subSuite", "value": "TestClass"}, {"name": "host", "value": "SZLX"}, {"name": "thread", "value": "10268-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_case"}], "links": [{"type": "link", "url": "http://pre-202108-10.zhixueyun.com/api/v1/exam/announcement", "name": "http://pre-202108-10.zhixueyun.com/api/v1/exam/announcement"}]}