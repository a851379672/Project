{
  "uid" : "d7d86bd035e0b067",
  "name" : "【普通试题】-查询目录试题",
  "fullName" : "test_case.test_case.TestClass#test_run",
  "historyId" : "5b631b92602a240ec109803556db4982",
  "time" : {
    "start" : 1636368889436,
    "stop" : 1636368889748,
    "duration" : 312
  },
  "status" : "skipped",
  "statusMessage" : "XFAIL reason: \n\n_pytest.outcomes.XFailed: <XFailed instance>",
  "statusTrace" : "self = <common.validate.JsonPath object at 0x0000018ADCB20B80>, actual = 0\nexpect = '36', response = <Response [200]>\n\n    def handler(self, actual, expect, response):\n        if actual.startswith('$'):\n            if re.findall(r'\\$[a-zA-Z](.*?){', actual):\n                actual = re.findall('{(.*?)}', actual)[0]\n                actual = str(jsonpath.jsonpath(response.json(), actual)[0])[:-3]\n            else:\n                actual = jsonpath.jsonpath(response.json(), actual)[0]\n            try:\n>               assert expect.__str__() in actual.__str__()\nE               AssertionError\n\ncommon\\validate.py:56: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_case.test_case.TestClass object at 0x0000018ADC96BEE0>\napi_data = {'allure': {'allure_descrption': '【普通试题】-查询目录试题', 'allure_feature': '管理端', 'allure_story': '考试模块', 'allure_sub_suite':...d},', 'depttype': 1, 'forbidden': 0, 'organizationId': '${organizationId}', ...}, 'url': '/api/v1/exam/question'}, ...}\n\n    @pytest.mark.parametrize('api_data', ReadData().return_data())\n    def test_run(self, api_data):\n        \"\"\"\n        :param api_data\n        :return: report_content\n        \"\"\"\n    \n        \"\"\"数据处理\"\"\"\n        request_data = eval(self.deal_with.replace_(api_data['request']))\n        request_data['url'] = self.file['ent_url'] + request_data['url']\n        if request_data.get('files'):\n            request_data['files'] = data_depend.file_depend(request_data)\n        if request_data['headers'].get('content-type') and 'urlencoded' in request_data['headers']['content-type']:\n            request_data['data'] = urlencode(request_data['data'])\n        allure_(api_data)\n    \n        \"\"\"日志输出\"\"\"\n        response = requests.session().request(**request_data)\n        get_req_resp_record(response)\n    \n        \"\"\"sql执行\"\"\"\n        sql_statement = api_data.get('sql_statement')\n        if sql_statement:\n            [MysqlOperate(value[0]).execute_sql(value[1], self.deal_with) for sql in sql_statement\n             for value in sql.values()]\n    \n        \"\"\"参数提取\"\"\"\n        extract = api_data.get('extract')\n        if extract:\n            [self.deal_with.extract_(key, value, response, self.deal_with) for key, value in extract.items()]\n    \n        \"\"\"响应断言\"\"\"\n        validate = api_data.get('validate')\n        if validate:\n>           [self.validate.validate_(value[0], value[1], response, self.deal_with) for validate_dict in validate\n             for key, value in validate_dict.items()]\n\ntest_case\\test_case.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_case\\test_case.py:66: in <listcomp>\n    [self.validate.validate_(value[0], value[1], response, self.deal_with) for validate_dict in validate\ncommon\\validate.py:31: in validate_\n    self.judge.handler(actual, expect, response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.validate.JsonPath object at 0x0000018ADCB20B80>, actual = 0\nexpect = '36', response = <Response [200]>\n\n    def handler(self, actual, expect, response):\n        if actual.startswith('$'):\n            if re.findall(r'\\$[a-zA-Z](.*?){', actual):\n                actual = re.findall('{(.*?)}', actual)[0]\n                actual = str(jsonpath.jsonpath(response.json(), actual)[0])[:-3]\n            else:\n                actual = jsonpath.jsonpath(response.json(), actual)[0]\n            try:\n                assert expect.__str__() in actual.__str__()\n                logger.info(f\"响应断言： 预期值：'{expect}' 实际值：'{actual}', 断言成功!\")\n            except AssertionError:\n                logger.info(f'断言失败：{AssertionError}')\n>               pytest.xfail('')\nE               _pytest.outcomes.XFailed: <XFailed instance>\n\ncommon\\validate.py:60: XFailed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1636368882642,
      "stop" : 1636368882646,
      "duration" : 4
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "get_config",
    "time" : {
      "start" : 1636368882290,
      "stop" : 1636368882642,
      "duration" : 352
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "skipped",
    "statusMessage" : "XFAIL reason: \n\n_pytest.outcomes.XFailed: <XFailed instance>",
    "statusTrace" : "self = <common.validate.JsonPath object at 0x0000018ADCB20B80>, actual = 0\nexpect = '36', response = <Response [200]>\n\n    def handler(self, actual, expect, response):\n        if actual.startswith('$'):\n            if re.findall(r'\\$[a-zA-Z](.*?){', actual):\n                actual = re.findall('{(.*?)}', actual)[0]\n                actual = str(jsonpath.jsonpath(response.json(), actual)[0])[:-3]\n            else:\n                actual = jsonpath.jsonpath(response.json(), actual)[0]\n            try:\n>               assert expect.__str__() in actual.__str__()\nE               AssertionError\n\ncommon\\validate.py:56: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_case.test_case.TestClass object at 0x0000018ADC96BEE0>\napi_data = {'allure': {'allure_descrption': '【普通试题】-查询目录试题', 'allure_feature': '管理端', 'allure_story': '考试模块', 'allure_sub_suite':...d},', 'depttype': 1, 'forbidden': 0, 'organizationId': '${organizationId}', ...}, 'url': '/api/v1/exam/question'}, ...}\n\n    @pytest.mark.parametrize('api_data', ReadData().return_data())\n    def test_run(self, api_data):\n        \"\"\"\n        :param api_data\n        :return: report_content\n        \"\"\"\n    \n        \"\"\"数据处理\"\"\"\n        request_data = eval(self.deal_with.replace_(api_data['request']))\n        request_data['url'] = self.file['ent_url'] + request_data['url']\n        if request_data.get('files'):\n            request_data['files'] = data_depend.file_depend(request_data)\n        if request_data['headers'].get('content-type') and 'urlencoded' in request_data['headers']['content-type']:\n            request_data['data'] = urlencode(request_data['data'])\n        allure_(api_data)\n    \n        \"\"\"日志输出\"\"\"\n        response = requests.session().request(**request_data)\n        get_req_resp_record(response)\n    \n        \"\"\"sql执行\"\"\"\n        sql_statement = api_data.get('sql_statement')\n        if sql_statement:\n            [MysqlOperate(value[0]).execute_sql(value[1], self.deal_with) for sql in sql_statement\n             for value in sql.values()]\n    \n        \"\"\"参数提取\"\"\"\n        extract = api_data.get('extract')\n        if extract:\n            [self.deal_with.extract_(key, value, response, self.deal_with) for key, value in extract.items()]\n    \n        \"\"\"响应断言\"\"\"\n        validate = api_data.get('validate')\n        if validate:\n>           [self.validate.validate_(value[0], value[1], response, self.deal_with) for validate_dict in validate\n             for key, value in validate_dict.items()]\n\ntest_case\\test_case.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_case\\test_case.py:66: in <listcomp>\n    [self.validate.validate_(value[0], value[1], response, self.deal_with) for validate_dict in validate\ncommon\\validate.py:31: in validate_\n    self.judge.handler(actual, expect, response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.validate.JsonPath object at 0x0000018ADCB20B80>, actual = 0\nexpect = '36', response = <Response [200]>\n\n    def handler(self, actual, expect, response):\n        if actual.startswith('$'):\n            if re.findall(r'\\$[a-zA-Z](.*?){', actual):\n                actual = re.findall('{(.*?)}', actual)[0]\n                actual = str(jsonpath.jsonpath(response.json(), actual)[0])[:-3]\n            else:\n                actual = jsonpath.jsonpath(response.json(), actual)[0]\n            try:\n                assert expect.__str__() in actual.__str__()\n                logger.info(f\"响应断言： 预期值：'{expect}' 实际值：'{actual}', 断言成功!\")\n            except AssertionError:\n                logger.info(f'断言失败：{AssertionError}')\n>               pytest.xfail('')\nE               _pytest.outcomes.XFailed: <XFailed instance>\n\ncommon\\validate.py:60: XFailed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "8100dd7d6a9d28dc",
      "name" : "log",
      "source" : "8100dd7d6a9d28dc.txt",
      "type" : "text/plain",
      "size" : 3488
    }, {
      "uid" : "af530f7a9c9f4659",
      "name" : "stderr",
      "source" : "af530f7a9c9f4659.txt",
      "type" : "text/plain",
      "size" : 7430
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1636368894111,
      "stop" : 1636368894111,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "suite",
    "value" : "【普通试题】-查询目录试题"
  }, {
    "name" : "subSuite",
    "value" : "考试模块"
  }, {
    "name" : "feature",
    "value" : "管理端"
  }, {
    "name" : "story",
    "value" : "考试模块"
  }, {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "test_case"
  }, {
    "name" : "subSuite",
    "value" : "TestClass"
  }, {
    "name" : "host",
    "value" : "SZLX"
  }, {
    "name" : "thread",
    "value" : "18288-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.test_case"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "/api/v1/exam/question",
    "url" : "/api/v1/exam/question",
    "type" : "link"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "d7d86bd035e0b067.json",
  "parameterValues" : [ ]
}