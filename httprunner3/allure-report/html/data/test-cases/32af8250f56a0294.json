{
  "uid" : "32af8250f56a0294",
  "name" : "【普通考试】——考试答题-触发暂停考试",
  "fullName" : "test_case.test_case.TestClass#test_run",
  "historyId" : "7f71d1f1c8253c60d81d319df80e1970",
  "time" : {
    "start" : 1643080826634,
    "stop" : 1643080826757,
    "duration" : 123
  },
  "description" : "\n        :param api_data\n        :return: report_content\n        ",
  "descriptionHtml" : "<pre><code>    :param api_data\n    :return: report_content\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_case.test_case.TestClass object at 0x000002D4D06CE2E0>\napi_data = {'allure': {'allure_descrption': '【普通考试】——考试答题-触发暂停考试', 'allure_feature': '管理端', 'allure_story': '考试模块', 'allure_sub_s...plication/x-www-form-urlencoded; charset=UTF-8'}, 'method': 'POST', 'url': 'api/v1/exam/exam-record/front/pause'}, ...}\n\n    @pytest.mark.flaky(reruns=3, reruns_delay=5)\n    @pytest.mark.parametrize('api_data', ReadData().return_data())\n    def test_run(self, api_data):\n        \"\"\"\n        :param api_data\n        :return: report_content\n        \"\"\"\n    \n        \"\"\"数据处理\"\"\"\n        request_data = eval(self.deal_with.replace_(api_data['request']))\n        request_data['url'] = f\"{self.file['ent_url']}{request_data['url']}\"\n        if request_data.get('files'):\n            request_data['files'] = FileDepend().file_dispose(request_data['files'])\n        if request_data['headers'].get('content-type') and 'urlencoded' in request_data['headers'].get('content-type'):\n            request_data['data'] = urlencode(request_data['data'])\n        allure_(api_data, self.file['ent_url'])\n    \n        \"\"\"日志输出\"\"\"\n        response = requests.session().request(**request_data, timeout=10)\n        get_req_resp_record(response)\n    \n        \"\"\"sql执行\"\"\"\n        sql_statement = api_data.get('sql_statement')\n        if sql_statement:\n            [MysqlOperate(key, value[0]).execute_sql(value[1], self.deal_with) for sql in sql_statement\n             for key, value in sql.items()]\n    \n        \"\"\"参数提取\"\"\"\n        extract = api_data.get('extract')\n        if extract:\n            [self.deal_with.extract_(key, value, response, self.deal_with) for key, value in extract.items()]\n    \n        \"\"\"响应断言\"\"\"\n        validate = api_data.get('validate')\n        if validate:\n>           [self.validate.validate_(value[0], value[1], response, self.deal_with) for validate_dict in validate\n             for key, value in validate_dict.items()]\n\ntest_case\\test_case.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_case\\test_case.py:67: in <listcomp>\n    [self.validate.validate_(value[0], value[1], response, self.deal_with) for validate_dict in validate\ncommon\\validate.py:28: in validate_\n    self.judge.handler(actual, expect, response)\ncommon\\validate.py:52: in handler\n    assert_(actual.__str__().lower(), expect.__str__().lower())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nactual = 'none', expect = '1'\n\n    def assert_(actual, expect):\n        if expect in actual:\n            logger.info(f\"响应断言:  预期值: '{expect}' 实际值: '{actual}', 断言成功!\")\n        else:\n            logger.info(f\"响应断言:  预期值: '{expect}' 实际值: '{actual}', 断言失败!\")\n>           assert expect.__str__().lower() in actual.__str__().lower()\nE           AssertionError\n\ncommon\\validate.py:79: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "file_fixture",
    "time" : {
      "start" : 1643080808357,
      "stop" : 1643080808364,
      "duration" : 7
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "xunit_setup_class_fixture_TestClass",
    "time" : {
      "start" : 1643080808619,
      "stop" : 1643080808624,
      "duration" : 5
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "fsetup_tear_down",
    "time" : {
      "start" : 1643080808365,
      "stop" : 1643080808365,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "get_config",
    "time" : {
      "start" : 1643080808365,
      "stop" : 1643080808619,
      "duration" : 254
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n        :param api_data\n        :return: report_content\n        ",
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_case.test_case.TestClass object at 0x000002D4D06CE2E0>\napi_data = {'allure': {'allure_descrption': '【普通考试】——考试答题-触发暂停考试', 'allure_feature': '管理端', 'allure_story': '考试模块', 'allure_sub_s...plication/x-www-form-urlencoded; charset=UTF-8'}, 'method': 'POST', 'url': 'api/v1/exam/exam-record/front/pause'}, ...}\n\n    @pytest.mark.flaky(reruns=3, reruns_delay=5)\n    @pytest.mark.parametrize('api_data', ReadData().return_data())\n    def test_run(self, api_data):\n        \"\"\"\n        :param api_data\n        :return: report_content\n        \"\"\"\n    \n        \"\"\"数据处理\"\"\"\n        request_data = eval(self.deal_with.replace_(api_data['request']))\n        request_data['url'] = f\"{self.file['ent_url']}{request_data['url']}\"\n        if request_data.get('files'):\n            request_data['files'] = FileDepend().file_dispose(request_data['files'])\n        if request_data['headers'].get('content-type') and 'urlencoded' in request_data['headers'].get('content-type'):\n            request_data['data'] = urlencode(request_data['data'])\n        allure_(api_data, self.file['ent_url'])\n    \n        \"\"\"日志输出\"\"\"\n        response = requests.session().request(**request_data, timeout=10)\n        get_req_resp_record(response)\n    \n        \"\"\"sql执行\"\"\"\n        sql_statement = api_data.get('sql_statement')\n        if sql_statement:\n            [MysqlOperate(key, value[0]).execute_sql(value[1], self.deal_with) for sql in sql_statement\n             for key, value in sql.items()]\n    \n        \"\"\"参数提取\"\"\"\n        extract = api_data.get('extract')\n        if extract:\n            [self.deal_with.extract_(key, value, response, self.deal_with) for key, value in extract.items()]\n    \n        \"\"\"响应断言\"\"\"\n        validate = api_data.get('validate')\n        if validate:\n>           [self.validate.validate_(value[0], value[1], response, self.deal_with) for validate_dict in validate\n             for key, value in validate_dict.items()]\n\ntest_case\\test_case.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_case\\test_case.py:67: in <listcomp>\n    [self.validate.validate_(value[0], value[1], response, self.deal_with) for validate_dict in validate\ncommon\\validate.py:28: in validate_\n    self.judge.handler(actual, expect, response)\ncommon\\validate.py:52: in handler\n    assert_(actual.__str__().lower(), expect.__str__().lower())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nactual = 'none', expect = '1'\n\n    def assert_(actual, expect):\n        if expect in actual:\n            logger.info(f\"响应断言:  预期值: '{expect}' 实际值: '{actual}', 断言成功!\")\n        else:\n            logger.info(f\"响应断言:  预期值: '{expect}' 实际值: '{actual}', 断言失败!\")\n>           assert expect.__str__().lower() in actual.__str__().lower()\nE           AssertionError\n\ncommon\\validate.py:79: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "a0986c9199b40325",
      "name" : "log",
      "source" : "a0986c9199b40325.txt",
      "type" : "text/plain",
      "size" : 91
    }, {
      "uid" : "d951d9fb3cf2df40",
      "name" : "stderr",
      "source" : "d951d9fb3cf2df40.txt",
      "type" : "text/plain",
      "size" : 1433
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "xunit_setup_class_fixture_TestClass::0",
    "time" : {
      "start" : 1643080876999,
      "stop" : 1643080876999,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "fsetup_tear_down::0",
    "time" : {
      "start" : 1643080877005,
      "stop" : 1643080877010,
      "duration" : 5
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "suite",
    "value" : "【普通考试】——考试答题-触发暂停考试"
  }, {
    "name" : "subSuite",
    "value" : "考试模块"
  }, {
    "name" : "feature",
    "value" : "管理端"
  }, {
    "name" : "story",
    "value" : "考试模块"
  }, {
    "name" : "tag",
    "value" : "flaky(reruns=3, reruns_delay=5)"
  }, {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "test_case"
  }, {
    "name" : "subSuite",
    "value" : "TestClass"
  }, {
    "name" : "host",
    "value" : "SZLX"
  }, {
    "name" : "thread",
    "value" : "28248-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.test_case"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "api_data",
    "value" : "{'name': '【普通考试】——考试答题-触发暂停考试', 'request': {'url': 'api/v1/exam/exam-record/front/pause', 'method': 'POST', 'headers': {'Authorization': 'Bearer__${student_token}', 'content-type': 'application/x-www-form-urlencoded; charset=UTF-8'}, 'data': {'examRecordId': '${examRecordId}'}}, 'sql_statement': None, 'extract': None, 'validate': [{'eq': ['$.isPause', '1']}], 'allure': {'allure_descrption': '【普通考试】——考试答题-触发暂停考试', 'allure_suite': '管理端', 'allure_sub_suite': '考试模块', 'allure_feature': '管理端', 'allure_story': '考试模块'}}"
  } ],
  "links" : [ {
    "name" : "https://tester1.zhixueyun.com/api/v1/exam/exam-record/front/pause",
    "url" : "https://tester1.zhixueyun.com/api/v1/exam/exam-record/front/pause",
    "type" : "link"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "flaky(reruns=3, reruns_delay=5)" ]
  },
  "source" : "32af8250f56a0294.json",
  "parameterValues" : [ "{'name': '【普通考试】——考试答题-触发暂停考试', 'request': {'url': 'api/v1/exam/exam-record/front/pause', 'method': 'POST', 'headers': {'Authorization': 'Bearer__${student_token}', 'content-type': 'application/x-www-form-urlencoded; charset=UTF-8'}, 'data': {'examRecordId': '${examRecordId}'}}, 'sql_statement': None, 'extract': None, 'validate': [{'eq': ['$.isPause', '1']}], 'allure': {'allure_descrption': '【普通考试】——考试答题-触发暂停考试', 'allure_suite': '管理端', 'allure_sub_suite': '考试模块', 'allure_feature': '管理端', 'allure_story': '考试模块'}}" ]
}