{
  "uid" : "b6deef23fd2db0c1",
  "name" : "test_run[api_data6]",
  "fullName" : "test_case.test_case.TestClass#test_run",
  "historyId" : "d79ef2ab66480eab68e0fe95f96074ea",
  "time" : {
    "start" : 1634806815325,
    "stop" : 1634806815325,
    "duration" : 0
  },
  "status" : "broken",
  "statusMessage" : "TypeError: replace() argument 2 must be str, not None",
  "statusTrace" : "self = <test_case.test_case.TestClass object at 0x000002D423997A30>\napi_data = {'allure': {'allure_descrption': '【公告配置】——取消置顶公告', 'allure_feature': '管理端', 'allure_story': '考试模块', 'allure_sub_suite'...}, 'method': 'PUT', 'url': 'http://pre-202108-10.zhixueyun.com/api/v1/exam/announcement/remove-top/${noticesId}'}, ...}\n\n    @pytest.mark.parametrize('api_data', ReadData().return_data())\n    def test_run(self, api_data):\n        \"\"\"\n        :param api_data\n        :return: report_content\n        \"\"\"\n    \n        \"\"\"数据处理\"\"\"\n>       request_data = eval(self.deal_with.replace_(api_data['request']))\n\ntest_case\\test_case.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\data_depend.py:52: in replace_\n    replace_copy = self.get_replace(keys1, replace_copy)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.data_depend.DataDepend object at 0x000002D423971520>\nkeys = ['noticesId', 'access_token', 'noticesId']\nreplace_data = \"{'url': 'http://pre-202108-10.zhixueyun.com/api/v1/exam/announcement/remove-top/${noticesId}', 'method': 'PUT', 'head...tion/x-www-form-urlencoded; charset=UTF-8', 'uri': 'exam/notices'}, 'data': {'id': '${noticesId}', 'title': 'pre公告1'}}\"\n\n    def get_replace(self, keys, replace_data):\n        \"\"\"\n        :param keys: keys\n        :param replace_data: replace_data\n        :return:\n        \"\"\"\n        for key in keys:\n            if self.image_file(keys[-1]):\n                #   图片加密转换\n                replace_data = self.image_depend(keys[1], key, replace_data)\n                break\n            if key.startswith('$'):\n                #   获取方法集合、倒序排序\n                func_gather = re.findall(r'\\$(.*?){', key)[::-1]\n                func = func_gather[1]\n                if len(func_gather) > 1:\n                    #   方法抽取及参数处理\n                    func_replace = re.findall('{(.*?)}', re.findall('{(.*?)}', key)[0] + '}')[0]\n                    objects = self.in_getattr_(func)\n                    func_params = self.getattr_(objects, func_gather[0], func_replace)\n                else:\n                    func_params = None\n                if self.in_getattr_(func):\n                    objects = self.in_getattr_(func)\n                    value = self.getattr_(objects, func, func_params)\n                else:\n                    objects = self.in_getattr_(func)\n                    value = self.getattr_(objects, key)\n                replace_data = replace_data.replace(replace_data, value.__str__())\n            elif self.in_getattr_(key):\n                objects = self.in_getattr_(key)\n                if len(keys) > 1:\n                    value = self.getattr_(objects, key, keys[1])\n                    replace_data = replace_data.replace('$' + key + '{' + keys[1] + '}', value.__str__())\n                else:\n                    value = self.getattr_(objects, key)\n                    replace_data = replace_data.replace('$' + key + '{}', value.__str__())\n                break\n            else:\n                value = self.dicts.get(key)\n>               replace_data = replace_data.replace('${' + key + '}', value)\nE               TypeError: replace() argument 2 must be str, not None\n\ncommon\\data_depend.py:106: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_config",
    "time" : {
      "start" : 1634806814318,
      "stop" : 1634806814616,
      "duration" : 298
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1634806814616,
      "stop" : 1634806814616,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1634806815360,
      "stop" : 1634806815360,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "test_case"
  }, {
    "name" : "subSuite",
    "value" : "TestClass"
  }, {
    "name" : "host",
    "value" : "SZLX"
  }, {
    "name" : "thread",
    "value" : "10268-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.test_case"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "b6deef23fd2db0c1.json",
  "parameterValues" : [ ]
}