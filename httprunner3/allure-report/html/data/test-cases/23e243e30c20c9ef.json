{
  "uid" : "23e243e30c20c9ef",
  "name" : "【普通考试】——考试管理-试题分析-查询已答试题列表",
  "fullName" : "test_case.test_case.TestClass#test_run",
  "historyId" : "e26b25f3cb2f5bfaa4993a468262e9ca",
  "time" : {
    "start" : 1643080609906,
    "stop" : 1643080610033,
    "duration" : 127
  },
  "description" : "\n        :param api_data\n        :return: report_content\n        ",
  "descriptionHtml" : "<pre><code>    :param api_data\n    :return: report_content\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "TypeError: 'bool' object is not subscriptable",
  "statusTrace" : "self = <test_case.test_case.TestClass object at 0x000001E8DD8BBCA0>\napi_data = {'allure': {'allure_descrption': '【普通考试】——考试管理-试题分析-查询已答试题列表', 'allure_feature': '管理端', 'allure_story': '考试模块', 'allur...orderField': 'answerCount', 'orderType': 0, 'page': 1, ...}, 'url': 'api/v1/exam/question-analyze/question-list'}, ...}\n\n    @pytest.mark.parametrize('api_data', ReadData().return_data())\n    def test_run(self, api_data):\n        \"\"\"\n        :param api_data\n        :return: report_content\n        \"\"\"\n    \n        \"\"\"数据处理\"\"\"\n        request_data = eval(self.deal_with.replace_(api_data['request']))\n        request_data['url'] = f\"{self.file['ent_url']}{request_data['url']}\"\n        if request_data.get('files'):\n            request_data['files'] = FileDepend().file_dispose(request_data['files'])\n        if request_data['headers'].get('content-type') and 'urlencoded' in request_data['headers'].get('content-type'):\n            request_data['data'] = urlencode(request_data['data'])\n        allure_(api_data, self.file['ent_url'])\n    \n        \"\"\"日志输出\"\"\"\n        response = requests.session().request(**request_data, timeout=10)\n        get_req_resp_record(response)\n    \n        \"\"\"sql执行\"\"\"\n        sql_statement = api_data.get('sql_statement')\n        if sql_statement:\n            [MysqlOperate(key, value[0]).execute_sql(value[1], self.deal_with) for sql in sql_statement\n             for key, value in sql.items()]\n    \n        \"\"\"参数提取\"\"\"\n        extract = api_data.get('extract')\n        if extract:\n>           [self.deal_with.extract_(key, value, response, self.deal_with) for key, value in extract.items()]\n\ntest_case\\test_case.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_case\\test_case.py:62: in <listcomp>\n    [self.deal_with.extract_(key, value, response, self.deal_with) for key, value in extract.items()]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.data_depend.DataDepend object at 0x000001E8DD947C40>\nkey = 'answer', value = '$.items[0].questionCopyId', response = <Response [200]>\ndeal_with = <common.data_depend.DataDepend object at 0x000001E8DD947C40>\n\n    def extract_(self, key, value, response, deal_with):\n        \"\"\"\n        :param key: extract_key\n        :param value: extract_value\n        :param response: response\n        :param deal_with: deal_with\n        :return: log info\n        \"\"\"\n        replace_data = deal_with.replace_(value)\n        if replace_data:\n            value = replace_data\n        if value.startswith('$.'):\n>           values = {key: jsonpath.jsonpath(response.json(), value)[0]}.get(key)\nE           TypeError: 'bool' object is not subscriptable\n\ncommon\\data_depend.py:34: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "fsetup_tear_down",
    "time" : {
      "start" : 1643080586705,
      "stop" : 1643080586705,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "xunit_setup_class_fixture_TestClass",
    "time" : {
      "start" : 1643080586990,
      "stop" : 1643080586995,
      "duration" : 5
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "file_fixture",
    "time" : {
      "start" : 1643080586697,
      "stop" : 1643080586705,
      "duration" : 8
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "get_config",
    "time" : {
      "start" : 1643080586705,
      "stop" : 1643080586990,
      "duration" : 285
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n        :param api_data\n        :return: report_content\n        ",
    "status" : "broken",
    "statusMessage" : "TypeError: 'bool' object is not subscriptable",
    "statusTrace" : "self = <test_case.test_case.TestClass object at 0x000001E8DD8BBCA0>\napi_data = {'allure': {'allure_descrption': '【普通考试】——考试管理-试题分析-查询已答试题列表', 'allure_feature': '管理端', 'allure_story': '考试模块', 'allur...orderField': 'answerCount', 'orderType': 0, 'page': 1, ...}, 'url': 'api/v1/exam/question-analyze/question-list'}, ...}\n\n    @pytest.mark.parametrize('api_data', ReadData().return_data())\n    def test_run(self, api_data):\n        \"\"\"\n        :param api_data\n        :return: report_content\n        \"\"\"\n    \n        \"\"\"数据处理\"\"\"\n        request_data = eval(self.deal_with.replace_(api_data['request']))\n        request_data['url'] = f\"{self.file['ent_url']}{request_data['url']}\"\n        if request_data.get('files'):\n            request_data['files'] = FileDepend().file_dispose(request_data['files'])\n        if request_data['headers'].get('content-type') and 'urlencoded' in request_data['headers'].get('content-type'):\n            request_data['data'] = urlencode(request_data['data'])\n        allure_(api_data, self.file['ent_url'])\n    \n        \"\"\"日志输出\"\"\"\n        response = requests.session().request(**request_data, timeout=10)\n        get_req_resp_record(response)\n    \n        \"\"\"sql执行\"\"\"\n        sql_statement = api_data.get('sql_statement')\n        if sql_statement:\n            [MysqlOperate(key, value[0]).execute_sql(value[1], self.deal_with) for sql in sql_statement\n             for key, value in sql.items()]\n    \n        \"\"\"参数提取\"\"\"\n        extract = api_data.get('extract')\n        if extract:\n>           [self.deal_with.extract_(key, value, response, self.deal_with) for key, value in extract.items()]\n\ntest_case\\test_case.py:62: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_case\\test_case.py:62: in <listcomp>\n    [self.deal_with.extract_(key, value, response, self.deal_with) for key, value in extract.items()]\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.data_depend.DataDepend object at 0x000001E8DD947C40>\nkey = 'answer', value = '$.items[0].questionCopyId', response = <Response [200]>\ndeal_with = <common.data_depend.DataDepend object at 0x000001E8DD947C40>\n\n    def extract_(self, key, value, response, deal_with):\n        \"\"\"\n        :param key: extract_key\n        :param value: extract_value\n        :param response: response\n        :param deal_with: deal_with\n        :return: log info\n        \"\"\"\n        replace_data = deal_with.replace_(value)\n        if replace_data:\n            value = replace_data\n        if value.startswith('$.'):\n>           values = {key: jsonpath.jsonpath(response.json(), value)[0]}.get(key)\nE           TypeError: 'bool' object is not subscriptable\n\ncommon\\data_depend.py:34: TypeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "dd2180669064e5dd",
      "name" : "stderr",
      "source" : "dd2180669064e5dd.txt",
      "type" : "text/plain",
      "size" : 1201
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "fsetup_tear_down::0",
    "time" : {
      "start" : 1643080642834,
      "stop" : 1643080642840,
      "duration" : 6
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "xunit_setup_class_fixture_TestClass::0",
    "time" : {
      "start" : 1643080642825,
      "stop" : 1643080642825,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "suite",
    "value" : "【普通考试】——考试管理-试题分析-查询已答试题列表"
  }, {
    "name" : "subSuite",
    "value" : "考试模块"
  }, {
    "name" : "feature",
    "value" : "管理端"
  }, {
    "name" : "story",
    "value" : "考试模块"
  }, {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "test_case"
  }, {
    "name" : "subSuite",
    "value" : "TestClass"
  }, {
    "name" : "host",
    "value" : "SZLX"
  }, {
    "name" : "thread",
    "value" : "7636-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.test_case"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "api_data",
    "value" : "{'name': '【普通考试】——考试管理-试题分析-查询已答试题列表', 'request': {'url': 'api/v1/exam/question-analyze/question-list', 'method': 'GET', 'headers': {'Authorization': 'Bearer__${admin_token}', 'uri': 'exam/exam'}, 'params': {'examId': '${examId}', 'orderType': 0, 'orderField': 'answerCount', 'page': 1, 'pageSize': 10}}, 'sql_statement': None, 'extract': {'answer': '$.items[0].questionCopyId'}, 'validate': [{'eq': ['Status Code', 200]}], 'allure': {'allure_descrption': '【普通考试】——考试管理-试题分析-查询已答试题列表', 'allure_suite': '管理端', 'allure_sub_suite': '考试模块', 'allure_feature': '管理端', 'allure_story': '考试模块'}}"
  } ],
  "links" : [ {
    "name" : "https://tester1.zhixueyun.com/api/v1/exam/question-analyze/question-list",
    "url" : "https://tester1.zhixueyun.com/api/v1/exam/question-analyze/question-list",
    "type" : "link"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "23e243e30c20c9ef.json",
  "parameterValues" : [ "{'name': '【普通考试】——考试管理-试题分析-查询已答试题列表', 'request': {'url': 'api/v1/exam/question-analyze/question-list', 'method': 'GET', 'headers': {'Authorization': 'Bearer__${admin_token}', 'uri': 'exam/exam'}, 'params': {'examId': '${examId}', 'orderType': 0, 'orderField': 'answerCount', 'page': 1, 'pageSize': 10}}, 'sql_statement': None, 'extract': {'answer': '$.items[0].questionCopyId'}, 'validate': [{'eq': ['Status Code', 200]}], 'allure': {'allure_descrption': '【普通考试】——考试管理-试题分析-查询已答试题列表', 'allure_suite': '管理端', 'allure_sub_suite': '考试模块', 'allure_feature': '管理端', 'allure_story': '考试模块'}}" ]
}