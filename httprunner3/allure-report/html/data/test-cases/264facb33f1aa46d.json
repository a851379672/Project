{
  "uid" : "264facb33f1aa46d",
  "name" : "【发放证书】——查询任务队列",
  "fullName" : "test_case.test_case.TestClass#test_run",
  "historyId" : "cbafe375c000c15fdf34415daa0a7235",
  "time" : {
    "start" : 1643080477389,
    "stop" : 1643080477527,
    "duration" : 138
  },
  "description" : "\n        :param api_data\n        :return: report_content\n        ",
  "descriptionHtml" : "<pre><code>    :param api_data\n    :return: report_content\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_case.test_case.TestClass object at 0x00000147E9822430>\napi_data = {'allure': {'allure_descrption': '【发放证书】——查询任务队列', 'allure_feature': '管理端', 'allure_story': '考试模块', 'allure_sub_suite'... 'params': {'businessTypes': 33, 'page': 1, 'pageSize': 10}, 'url': 'api/v1/human/export-task/find-export-tasks'}, ...}\n\n    @pytest.mark.flaky(reruns=3, reruns_delay=5)\n    @pytest.mark.parametrize('api_data', ReadData().return_data())\n    def test_run(self, api_data):\n        \"\"\"\n        :param api_data\n        :return: report_content\n        \"\"\"\n    \n        \"\"\"数据处理\"\"\"\n        request_data = eval(self.deal_with.replace_(api_data['request']))\n        request_data['url'] = f\"{self.file['ent_url']}{request_data['url']}\"\n        if request_data.get('files'):\n            request_data['files'] = FileDepend().file_dispose(request_data['files'])\n        if request_data['headers'].get('content-type') and 'urlencoded' in request_data['headers'].get('content-type'):\n            request_data['data'] = urlencode(request_data['data'])\n        allure_(api_data, self.file['ent_url'])\n    \n        \"\"\"日志输出\"\"\"\n        response = requests.session().request(**request_data, timeout=10)\n        get_req_resp_record(response)\n    \n        \"\"\"sql执行\"\"\"\n        sql_statement = api_data.get('sql_statement')\n        if sql_statement:\n            [MysqlOperate(key, value[0]).execute_sql(value[1], self.deal_with) for sql in sql_statement\n             for key, value in sql.items()]\n    \n        \"\"\"参数提取\"\"\"\n        extract = api_data.get('extract')\n        if extract:\n            [self.deal_with.extract_(key, value, response, self.deal_with) for key, value in extract.items()]\n    \n        \"\"\"响应断言\"\"\"\n        validate = api_data.get('validate')\n        if validate:\n>           [self.validate.validate_(value[0], value[1], response, self.deal_with) for validate_dict in validate\n             for key, value in validate_dict.items()]\n\ntest_case\\test_case.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_case\\test_case.py:67: in <listcomp>\n    [self.validate.validate_(value[0], value[1], response, self.deal_with) for validate_dict in validate\ncommon\\validate.py:28: in validate_\n    self.judge.handler(actual, expect, response)\ncommon\\validate.py:52: in handler\n    assert_(actual.__str__().lower(), expect.__str__().lower())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nactual = 'none', expect = '1'\n\n    def assert_(actual, expect):\n        if expect in actual:\n            logger.info(f\"响应断言:  预期值: '{expect}' 实际值: '{actual}', 断言成功!\")\n        else:\n            logger.info(f\"响应断言:  预期值: '{expect}' 实际值: '{actual}', 断言失败!\")\n>           assert expect.__str__().lower() in actual.__str__().lower()\nE           AssertionError\n\ncommon\\validate.py:79: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "get_config",
    "time" : {
      "start" : 1643080424057,
      "stop" : 1643080424321,
      "duration" : 264
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "file_fixture",
    "time" : {
      "start" : 1643080424047,
      "stop" : 1643080424056,
      "duration" : 9
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "xunit_setup_class_fixture_TestClass",
    "time" : {
      "start" : 1643080424321,
      "stop" : 1643080424326,
      "duration" : 5
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "fsetup_tear_down",
    "time" : {
      "start" : 1643080424056,
      "stop" : 1643080424057,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "\n        :param api_data\n        :return: report_content\n        ",
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_case.test_case.TestClass object at 0x00000147E9822430>\napi_data = {'allure': {'allure_descrption': '【发放证书】——查询任务队列', 'allure_feature': '管理端', 'allure_story': '考试模块', 'allure_sub_suite'... 'params': {'businessTypes': 33, 'page': 1, 'pageSize': 10}, 'url': 'api/v1/human/export-task/find-export-tasks'}, ...}\n\n    @pytest.mark.flaky(reruns=3, reruns_delay=5)\n    @pytest.mark.parametrize('api_data', ReadData().return_data())\n    def test_run(self, api_data):\n        \"\"\"\n        :param api_data\n        :return: report_content\n        \"\"\"\n    \n        \"\"\"数据处理\"\"\"\n        request_data = eval(self.deal_with.replace_(api_data['request']))\n        request_data['url'] = f\"{self.file['ent_url']}{request_data['url']}\"\n        if request_data.get('files'):\n            request_data['files'] = FileDepend().file_dispose(request_data['files'])\n        if request_data['headers'].get('content-type') and 'urlencoded' in request_data['headers'].get('content-type'):\n            request_data['data'] = urlencode(request_data['data'])\n        allure_(api_data, self.file['ent_url'])\n    \n        \"\"\"日志输出\"\"\"\n        response = requests.session().request(**request_data, timeout=10)\n        get_req_resp_record(response)\n    \n        \"\"\"sql执行\"\"\"\n        sql_statement = api_data.get('sql_statement')\n        if sql_statement:\n            [MysqlOperate(key, value[0]).execute_sql(value[1], self.deal_with) for sql in sql_statement\n             for key, value in sql.items()]\n    \n        \"\"\"参数提取\"\"\"\n        extract = api_data.get('extract')\n        if extract:\n            [self.deal_with.extract_(key, value, response, self.deal_with) for key, value in extract.items()]\n    \n        \"\"\"响应断言\"\"\"\n        validate = api_data.get('validate')\n        if validate:\n>           [self.validate.validate_(value[0], value[1], response, self.deal_with) for validate_dict in validate\n             for key, value in validate_dict.items()]\n\ntest_case\\test_case.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_case\\test_case.py:67: in <listcomp>\n    [self.validate.validate_(value[0], value[1], response, self.deal_with) for validate_dict in validate\ncommon\\validate.py:28: in validate_\n    self.judge.handler(actual, expect, response)\ncommon\\validate.py:52: in handler\n    assert_(actual.__str__().lower(), expect.__str__().lower())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nactual = 'none', expect = '1'\n\n    def assert_(actual, expect):\n        if expect in actual:\n            logger.info(f\"响应断言:  预期值: '{expect}' 实际值: '{actual}', 断言成功!\")\n        else:\n            logger.info(f\"响应断言:  预期值: '{expect}' 实际值: '{actual}', 断言失败!\")\n>           assert expect.__str__().lower() in actual.__str__().lower()\nE           AssertionError\n\ncommon\\validate.py:79: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "13763a414b2959f7",
      "name" : "log",
      "source" : "13763a414b2959f7.txt",
      "type" : "text/plain",
      "size" : 277
    }, {
      "uid" : "cd86973e9f86663f",
      "name" : "stderr",
      "source" : "cd86973e9f86663f.txt",
      "type" : "text/plain",
      "size" : 2353
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "xunit_setup_class_fixture_TestClass::0",
    "time" : {
      "start" : 1643080499214,
      "stop" : 1643080499214,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "fsetup_tear_down::0",
    "time" : {
      "start" : 1643080499225,
      "stop" : 1643080499231,
      "duration" : 6
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "suite",
    "value" : "【发放证书】——查询任务队列"
  }, {
    "name" : "subSuite",
    "value" : "考试模块"
  }, {
    "name" : "feature",
    "value" : "管理端"
  }, {
    "name" : "story",
    "value" : "考试模块"
  }, {
    "name" : "tag",
    "value" : "flaky(reruns=3, reruns_delay=5)"
  }, {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "test_case"
  }, {
    "name" : "subSuite",
    "value" : "TestClass"
  }, {
    "name" : "host",
    "value" : "SZLX"
  }, {
    "name" : "thread",
    "value" : "22184-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.test_case"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "api_data",
    "value" : "{'name': '【发放证书】——查询任务队列', 'request': {'url': 'api/v1/human/export-task/find-export-tasks', 'method': 'GET', 'headers': {'Authorization': 'Bearer__${admin_token}', 'uri': 'exam/certificate-record'}, 'params': {'businessTypes': 33, 'page': 1, 'pageSize': 10}}, 'sql_statement': None, 'extract': {'id': '$.items[0].id', 'attachmentId': '$.items[0].attachmentId'}, 'validate': [{'eq': ['$.items[0].failCount', '1']}, {'eq': ['$.items[0].successCount', '1']}], 'allure': {'allure_descrption': '【发放证书】——查询任务队列', 'allure_suite': '管理端', 'allure_sub_suite': '考试模块', 'allure_feature': '管理端', 'allure_story': '考试模块'}}"
  } ],
  "links" : [ {
    "name" : "https://tester1.zhixueyun.com/api/v1/human/export-task/find-export-tasks",
    "url" : "https://tester1.zhixueyun.com/api/v1/human/export-task/find-export-tasks",
    "type" : "link"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "flaky(reruns=3, reruns_delay=5)" ]
  },
  "source" : "264facb33f1aa46d.json",
  "parameterValues" : [ "{'name': '【发放证书】——查询任务队列', 'request': {'url': 'api/v1/human/export-task/find-export-tasks', 'method': 'GET', 'headers': {'Authorization': 'Bearer__${admin_token}', 'uri': 'exam/certificate-record'}, 'params': {'businessTypes': 33, 'page': 1, 'pageSize': 10}}, 'sql_statement': None, 'extract': {'id': '$.items[0].id', 'attachmentId': '$.items[0].attachmentId'}, 'validate': [{'eq': ['$.items[0].failCount', '1']}, {'eq': ['$.items[0].successCount', '1']}], 'allure': {'allure_descrption': '【发放证书】——查询任务队列', 'allure_suite': '管理端', 'allure_sub_suite': '考试模块', 'allure_feature': '管理端', 'allure_story': '考试模块'}}" ]
}