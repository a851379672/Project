{
  "uid" : "453157aae33c3a31",
  "name" : "test_run[api_data77]",
  "fullName" : "test_case.test_case.TestClass#test_run",
  "historyId" : "246878abd4709eb7f9574c3ed21dd435",
  "time" : {
    "start" : 1643107309782,
    "stop" : 1643107309782,
    "duration" : 0
  },
  "description" : "\n        :param api_data\n        :return: report_content\n        ",
  "descriptionHtml" : "<pre><code>    :param api_data\n    :return: report_content\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "TypeError: replace() argument 2 must be str, not None",
  "statusTrace" : "self = <test_case.test_case.TestClass object at 0x0000028BF57013D0>\napi_data = {'allure': {'allure_descrption': '【普通考试】——考试管理-考试管理-进入评卷界面', 'allure_feature': '管理端', 'allure_story': '考试模块', 'allure_...xam'}, 'method': 'GET', 'params': {'examRecordId': '${examRecordId}'}, 'url': 'api/v1/exam/exam/exam-mark-paper'}, ...}\n\n    @pytest.mark.flaky(reruns=5, reruns_delay=5)\n    @pytest.mark.parametrize('api_data', ReadData().return_data())\n    def test_run(self, api_data):\n        \"\"\"\n        :param api_data\n        :return: report_content\n        \"\"\"\n    \n        \"\"\"数据处理\"\"\"\n>       request_data = eval(self.deal_with.replace_(api_data['request']))\n\ntest_case\\test_case.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\data_depend.py:51: in replace_\n    replace_copy = self.get_replace(keys1, replace_copy)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <common.data_depend.DataDepend object at 0x0000028BF54C0AC0>\nkeys = ['admin_token', 'examRecordId']\nreplace_data = \"{'url': 'api/v1/exam/exam/exam-mark-paper', 'method': 'GET', 'headers': {'Authorization': 'Bearer__85e43964274f4735315f924b26fc2818', 'uri': 'exam/exam'}, 'params': {'examRecordId': '${examRecordId}'}}\"\n\n    def get_replace(self, keys, replace_data):\n        \"\"\"\n        :param keys: keys\n        :param replace_data: replace_data\n        :return:\n        \"\"\"\n        for key in keys:\n            if key.startswith('$'):\n                value = self.repeatedly(key)\n                replace_data = replace_data.replace(key + '}', value.__str__())\n            elif self.in_getattr(key):\n                #   自定义方法\n                replace_data = self.definition(keys, key, replace_data)\n                break\n            else:\n                #   替换变量\n                value = self.dicts.get(key)\n>               replace_data = replace_data.replace('${' + key + '}', value)\nE               TypeError: replace() argument 2 must be str, not None\n\ncommon\\data_depend.py:82: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "flaky(reruns=5, reruns_delay=5)"
  }, {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "test_case"
  }, {
    "name" : "subSuite",
    "value" : "TestClass"
  }, {
    "name" : "host",
    "value" : "SZLX"
  }, {
    "name" : "thread",
    "value" : "19144-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.test_case"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "flaky(reruns=5, reruns_delay=5)" ]
  },
  "source" : "453157aae33c3a31.json",
  "parameterValues" : [ ]
}