allure:
    {
      'allure_descrption': '',
      'allure_suite': '管理端',
      'allure_sub_suite': '考试模块',
      'allure_feature': '管理端',
      'allure_story': '考试模块'
    }
test:
-   name: 【监考/报名管理】——新增考试-基本信息-生成考试id
    request:
        url: api/v1/exam/exam/virtual-id
        method: GET
        headers:
            Authorization: Bearer__${admin_token}
            uri: exam/exam
        body:
    sql_statement:
    extract:
        examId: $.virtualExamId
    validate:
        -   eq:  [Status Code, 200]

-   name: 【监考/报名管理】——新增考试-添加试卷-试题组卷-新增试题-新增单选题
    request:
        url: api/v1/exam/question/other
        method: POST
        headers:
            Authorization: Bearer__${admin_token}
            content-type: application/x-www-form-urlencoded; charset=UTF-8
            uri: exam/exam
        body:
            {
                value: [{'value': 'A','valueText': 'A','name': 0,'type': 0},{'value': 'B','valueText': 'B', 'name': 1,
                         'type':1},{'value':'C','valueText':'C','name':2,'type':1},{'value':'D','valueText':'D',
                         'name':3,'type':1}],
                'questionAttrs[0][value]': 'A',
                'questionAttrs[0][valueText]': 'A',
                'questionAttrs[0][name]': 0,
                'questionAttrs[0][type]': 0,
                'questionAttrs[1][value]': 'B',
                'questionAttrs[1][valueText]': 'B',
                'questionAttrs[1][name]': 1,
                'questionAttrs[1][type]': 1,
                'questionAttrs[2][value]': 'C',
                'questionAttrs[2][valueText]': 'C',
                'questionAttrs[2][name]': 2,
                'questionAttrs[2][type]': 1,
                'questionAttrs[3][value]': 'D',
                'questionAttrs[3][valueText]': 'D',
                'questionAttrs[3][name]': 3,
                'questionAttrs[3][type]': 1,
                content: '【单选题】试题信息$date_time{}',
                contentText: '【单选题】试题信息$date_time{}',
                score: 1000,
                type: 1,
                parsing: '【单选题】试题解析',
                parsingText: '【单选题】试题解析',
                difficulty: 3,
                organizationId: '${organizationId}',
                isTemp: 1,
                depotEdit: 0
           }
    sql_statement:
    extract:
        danxuantiId: $.id
        danxuantiName: $.content
        danxuantiDifficulty: $.difficulty
    validate:
        -   eq:  ['$.type', '1']

-   name: 【监考/报名管理】——新增考试-添加试卷-试题组卷-保存试题组卷
    request:
        url: api/v1/exam/paper-class
        method: POST
        headers:
            Authorization: Bearer__${admin_token}
            content-type: application/x-www-form-urlencoded; charset=UTF-8
            uri: exam/exam
        body:
            {
                questionNum: 1,
                totalScore: 1000,
                paperClassQuestions:[{questionId: '${danxuantiId}', score: 1000, sequence: 0, isFromSelected: 0, sortType: 1}],
                'questionDepot//3/1/1': 10,
                type: 2,
                name: '【监考/报名考试】$date_time{}'
            }
    sql_statement:
    extract:
        paperId: $.id
        examName: $.name
    validate:
        -   eq:  ['$.status', '1']

-   name: 【监考/报名管理】——新增考试-添加试卷-查询试卷信息
    request:
        url: api/v1/exam/paper-class
        method: GET
        headers:
            Authorization: Bearer__${admin_token}
            uri: exam/exam
        body:
           {
                paperId: '${paperId}'
           }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.status', '1']

-   name: 【监考/报名管理】——考试发布-查询试卷信息
    request:
        url: api/v1/exam/paper-class
        method: GET
        headers:
            Authorization: Bearer__${admin_token}
            uri: exam/exam
        body:
            {
                paperId: '${paperId}',
                examName: '${examName}',
                businessType: 1
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.status', '1']

-   name: 【监考/报名管理】——发布考试
    request:
        url: api/v1/exam/exam
        method: POST
        headers:
            Authorization: Bearer__${admin_token}
            content-type: application/x-www-form-urlencoded; charset=UTF-8
            uri: exam/exam
        body:
            {
                publish: 1,
                isAllowSwitch: 0,
                virtualExamId: '${examId}',
                name: '${examName}',
                allowExamTimes: 1,
                isRepeat: 1,
                startTime: '$diy_time{*, *, *, *, *}',
                endTime: '$diy_time{*, *, +2, *, *}',
                duration: 60,
                client: 2,
                isCreditNeedPass: 1,
                type: 1,
                examNotes: '请考生仔细阅读，并参照执行，如遇特殊情况，请联系监考老师或拨打客服电话。',
                organizationId-text: '${organizationName}',
                organizationId: '${organizationId}',
                publisherId: '${adminId}',
                publishOrganizationId: '${organizationId}',
                isCredit: 1,
                supportApp: '1,2',
                clientType: 0,
                totalScore: 1000,
                evalutionRule: '{"passLess": 6,"passGreater": 8,"goodLess": 8,"goodGreater": 9,"excellentLess": 9,"noPassGreater": 6}',
                paperClassId: '${paperId}',
                paperSortRule: 1,
                rule: 6,
                paperShowRule: 2,
                audiences: '${studentName}',
                addItems: [{"joinId": "${studentId}","joinType": 5,"joinName": "${studentName}"}],
                emptyFlag: 0,
                resourceType: 4,
                branchAdmin: 'true',
                needApplicant: 1,
                needFillOutInfo: 0,
                applicantStartTime: '$time_stamp{$diy_time{*, *, -1, *, *, *}}',
                applicantEndTime: '$time_stamp{$diy_time{*, *, +1, *, *, *}}',
                needAudit: 1,
                auditStartTime: '$time_stamp{$diy_time{*, *, -1, *, *, *}}',
                auditEndTime: '$time_stamp{$diy_time{*, *, +1, *, *, *}}',
                preApproval: 0,
                applicantNeedAudit: 1,
                audienceItemIds: '${studentId}',
                resourceIds: 'validatePass',
                faceMode: 0,
                faceFailedRule: 0,
                isShowScore: 'false',
                paperViewRule: 1,
                showAnswerRule: 3,
                isSetAccessSecret: 0,
                admissionTicket: 0,
                hasCert: 0,
                paperClassScores: [{"questionDepotId": "","difficulty": "${danxuantiDifficulty}","totalScore": "1000","questionCount": "1","type": "1"}],
                audienceItems: [{"joinId":"${studentId}","joinType":5,"joinName":"${studentName}"}],
                topic: [],
                isSetPersonalCode: 0,
                noticeUser: 0,
                noticeTeacher: 0,
                noticeInvigilator: 0,
                website: '${organizationName}',
            }
    sql_statement:
    extract:
        businessId: $.id
    validate:
        -   eq:  ['$.supportApp', '1,2']

-   name: 【监考/报名管理】——考试发布-发布分支
    request:
        url: api/v1/exam/resource-pool/publish-to-branch
        method: POST
        headers:
            Authorization: Bearer__${admin_token}
            content-type: application/x-www-form-urlencoded; charset=UTF-8
            uri: exam/exam
        body:
            {
                businessId: '${businessId}',
                type: 4
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.status', 'ok']

-   name: 【监考/报名管理】——受众报名考试
    request:
        url: api/v1/exam/sign-auth
        method: POST
        headers:
            Authorization: Bearer__${student_token}
            content-type: application/x-www-form-urlencoded; charset=UTF-8
        body:
            {
                examId: '${businessId}',
                organizationId: '${organizationId}'
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.signUp.status', '1']

-   name: 【监考/报名管理】——生成考试记录
    request:
        url: api/v1/exam/exam/front/user-record/${businessId}
        method: GET
        headers:
            Authorization: Bearer__${student_token}
        body:
            {
                examId: '${businessId}',
                organizationId: '${organizationId}'
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.status', '5']

-   name: 【报名管理】——查询报名列表
    request:
        url: api/v1/exam/sign-up/all
        method: GET
        headers:
            Authorization: Bearer__${admin_token}
            uri: exam/signup
        body:
          {
            uri: 'exam/invigilator',
            page: 1,
            pageSize: 10
          }
    sql_statement:
    extract:
        signUpId: $.items[0].id
    validate:
        -   eq:  ['$.items[0].status', '1']

-   name: 【报名管理】——查询组织操作类型
    request:
        url: api/v1/system/grant/find-organization-operatortype
        method: GET
        headers:
            Authorization: Bearer__${admin_token}
            uri: exam/signup
        body:
          {
            uri: 'exam/signup'
          }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.${organizationId},', '0,1,2,3,4']

-   name: 【报名管理】——详细信息-个人信息-查询人员证书记录
    request:
        url: api/v1/exam/certificate-record/list
        method: GET
        headers:
            Authorization: Bearer__${admin_token}
            uri: exam/signup
        body:
          {
            memberId: '${studentId}',
            uri: 'exam/exam'
          }
    sql_statement:
    extract:
    validate:
        -   eq:  [Status Code, 200]

-   name: 【报名管理】——详细信息-个人信息-查询人员注册信息
    request:
        url: api/v1/exam/sign-auth/signup-detail
        method: GET
        headers:
            Authorization: Bearer__${admin_token}
            uri: exam/signup
        body:
            {
                signUpId: '${signUpId}'
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.signUpId', '${signUpId}']

-   name: 【报名管理】——详细信息-已考信息-查询人员考试记录
    request:
        url: api/v1/exam/exam-register/certification-list
        method: GET
        headers:
            Authorization: Bearer__${admin_token}
            uri: exam/signup
        body:
            {
              memberId: '${studentId}',
              uri: 'exam/exam'
            }
    sql_statement:
    extract:
    validate:
        -   eq:  [Status Code, 200]

-   name: 【报名管理】——详细信息-已考信息-查询人员考试记录
    request:
        url: api/v1/exam/signup-record/list
        method: GET
        headers:
            Authorization: Bearer__${admin_token}
            uri: exam/signup
        body:
            {
              memberId: '${studentId}',
              examId: '${businessId}'
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.[0].auditStatus', '1']

-   name: 【报名管理】——报名审核-获取审核通过消息模板
    request:
        url: api/v1/system/operation/message-template/content
        method: GET
        headers:
            Authorization: Bearer__${admin_token}
            uri: exam/signup
        body:
            {
              templateCode: 'exam_audit_pass',
              organizationId: '${organizationId}'
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.content', '通过']

-   name: 【报名管理】——报名审核-获取审核拒绝消息模板
    request:
        url: api/v1/system/operation/message-template/content
        method: GET
        headers:
            Authorization: Bearer__${admin_token}
            uri: exam/signup
        body:
            {
              templateCode: 'exam_audit_refuse',
              organizationId: '${organizationId}'
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.content', '拒绝']

-   name: 【报名管理】——报名审核-审核拒绝
    request:
        url: api/v1/exam/sign-up
        method: PUT
        headers:
            Authorization: Bearer__${admin_token}
            content-type: application/x-www-form-urlencoded; charset=UTF-8
            uri: exam/signup
        body:
            {
              signUpIds: '${signUpId}',
              signUpId: '${signUpId}',
              status: 3,
              isBatch: 0,
              isManage: 1,
              noticeUser: 1,
              noticeUserText: '您好，您申请的考试${examName}被拒绝，无法参加考试，谢谢。',
              noticeUserContent: '您好，您申请的考试${examName}被拒绝，无法参加考试，谢谢。'
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.[0].status', '1']

-   name: 【报名管理】——报名审核-审核通过
    request:
        url: api/v1/exam/sign-up
        method: PUT
        headers:
            Authorization: Bearer__${admin_token}
            content-type: application/x-www-form-urlencoded; charset=UTF-8
            uri: exam/signup
        body:
            {
              signUpIds: '${signUpId}',
              signUpId: '${signUpId}',
              status: 2,
              isBatch: 0,
              isManage: 1,
              noticeUser: 1,
              noticeUserText: '您好，您申请的考试${examName}已通过，请准时参加考试，谢谢。',
              noticeUserContent: '您好，您申请的考试${examName}已通过，请准时参加考试，谢谢。'
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.[0].status', '3']

-   name: 【监考管理】——查询监考列表
    request:
        url: api/v1/exam/invigilator/page/management-list
        method: GET
        headers:
          Authorization: Bearer__${admin_token}
          uri: exam/invigilator
        body:
            {
              uri: 'exam/invigilator',
              page: 1,
              pageSize: 10
            }
    sql_statement:
    extract:
    validate:
        -   eq:  [Status Code, 200]

-   name: 【监考管理】——考试名称-查询考试列表
    request:
        url: api/v1/exam/exam/exam-select
        method: GET
        headers:
          Authorization: Bearer__${admin_token}
          uri: exam/invigilator
        body:
          {
            uri: 'exam/invigilator',
            examType: 1,
            page: 1,
            pageSize: 10
          }
    sql_statement:
    extract:
        examId: $.items[0].id
    validate:
        -   eq:  [Status Code, 200]

-   name: 【监考管理】——考试名称-查询考试证书类型
    request:
        url: api/v1/system/organization/granted-organization
        method: GET
        headers:
          Authorization: Bearer__${admin_token}
          uri: exam/invigilator
        body:
            {
              uri: 'exam/invigilator',
              supportMore: 'true'
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.[0].status', '1']

-   name: 【监考管理】——监考老师-查询企业人员
    request:
        url: api/v1/human/member/members
        method: GET
        headers:
          Authorization: Bearer__${admin_token}
          uri: exam/invigilator
        body:
          {
            uri: exam/invigilator,
            organizationId: '${organizationId}',
            status: 3,
            page: 1,
            pageSize: 10
          }
    sql_statement:
    extract:
    validate:
        -   eq:  [Status Code, 200]

-   name: 【监考管理】——监考老师-查询企业人员数
    request:
        url: api/v1/human/member/members-count
        method: GET
        headers:
          Authorization: Bearer__${admin_token}
          uri: exam/invigilator
        body:
          {
            uri: exam/invigilator,
            organizationId: '${organizationId}',
            status: 3,
            page: 1,
            pageSize: 10
          }
    sql_statement:
    extract:
    validate:
        -   eq:  [Status Code, 200]

-   name: 【监考管理】——监考老师-查询组织路径
    request:
        url: api/v1/system/organization/find-path/${organizationId}
        method: GET
        headers:
          Authorization: Bearer__${admin_token}
          uri: exam/invigilator
        body:
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.name,', '${organizationName}']

-   name: 【监考管理】——监考范围-查询组织路径
    request:
        url: api/v1/system/organization/company-orgs
        method: GET
        headers:
          Authorization: Bearer__${admin_token}
          uri: exam/invigilator
        body:
          {
            uri: 'exam/invigilator',
            supportMore: 'true',
            status: 1,
            rootId: '${organizationId}'
          }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.[0].status,', '1']

-   name: 【监考管理】——新增监考老师
    request:
        url: api/v1/exam/invigilator/import-exam-member
        method: POST
        headers:
          Authorization: Bearer__${admin_token}
          content-type: application/x-www-form-urlencoded; charset=UTF-8
          uri: exam/invigilator
        body:
            {
              examId: '${businessId}',
              memberId: '${studentId}',
              invigilatorGrants: [{"organizationId":"${organizationId}","type":1}]
            }
    sql_statement:
    extract:
        invigilatorId: $.id
    validate:
        -   eq:  [Status Code, 200]

-   name: 【监考管理】——监考老师通知
    request:
        url: api/v1/exam/invigilator/message
        method: POST
        headers:
          Authorization: Bearer__${admin_token}
          content-type: application/x-www-form-urlencoded; charset=UTF-8
          uri: exam/invigilator
        body:
            {
              ids: '${invigilatorId}'
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.ids', '${invigilatorId}']

-   name: 【监考管理】——监考老师删除
    request:
        url: api/v1/exam/invigilator/invigilator/${invigilatorId}
        method: DELETE
        headers:
          Authorization: Bearer__${admin_token}
          content-type: application/x-www-form-urlencoded; charset=UTF-8
          uri: exam/invigilator
        body:
            {
              id: '${invigilatorId}',
              memberName: '${studentName}',
              examName: '${examName}',
              businessType: 0
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.id', '${invigilatorId}']
