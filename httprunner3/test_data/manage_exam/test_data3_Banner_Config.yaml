allure:
    {
      'allure_descrption': '',
      'allure_suite': '管理端',
      'allure_sub_suite': '考试模块',
      'allure_feature': '管理端',
      'allure_story': '考试模块'
    }
test:
-   name: 【广告配置】——新增认证考试-基本信息-生成考试id
    request:
        url: api/v1/exam/exam/virtual-id
        method: GET
        headers:
            Authorization: Bearer__${admin_token}
            uri: exam/group-exam
        body:
    sql_statement:
    extract:
        examId: $.virtualExamId
    validate:
        -   eq:  [Status Code, 200]

-   name: 【广告配置】——新增认证考试-添加试卷-试题组卷-新增试题-新增单选题
    request:
        url: api/v1/exam/question/other
        method: POST
        headers:
            Authorization: Bearer__${admin_token}
            content-type: application/x-www-form-urlencoded; charset=UTF-8
            uri: exam/group-exam
        body:
            {
                value: [{'value': 'A','valueText': 'A','name': 0,'type': 0},{'value': 'B','valueText': 'B', 'name': 1,
                         'type':1},{'value':'C','valueText':'C','name':2,'type':1},{'value':'D','valueText':'D',
                         'name':3,'type':1}],
                'questionAttrs[0][value]': 'A',
                'questionAttrs[0][valueText]': 'A',
                'questionAttrs[0][name]': 0,
                'questionAttrs[0][type]': 0,
                'questionAttrs[1][value]': 'B',
                'questionAttrs[1][valueText]': 'B',
                'questionAttrs[1][name]': 1,
                'questionAttrs[1][type]': 1,
                'questionAttrs[2][value]': 'C',
                'questionAttrs[2][valueText]': 'C',
                'questionAttrs[2][name]': 2,
                'questionAttrs[2][type]': 1,
                'questionAttrs[3][value]': 'D',
                'questionAttrs[3][valueText]': 'D',
                'questionAttrs[3][name]': 3,
                'questionAttrs[3][type]': 1,
                content: '【单选题】试题信息$date_time{}',
                contentText: '【单选题】试题信息$date_time{}',
                score: 1000,
                type: 1,
                parsing: '【单选题】试题解析',
                parsingText: '【单选题】试题解析',
                difficulty: 3,
                organizationId: '${organizationId}',
                isTemp: 1,
                depotEdit: 0
           }
    sql_statement:
    extract:
        danxuantiId: $.id
        danxuantiName: $.content
        danxuantiDifficulty: $.difficulty
    validate:
        -   eq:  ['$.type', '1']

-   name: 【广告配置】——新增认证考试-添加试卷-试题组卷-保存试题组卷
    request:
        url: api/v1/exam/paper-class
        method: POST
        headers:
            Authorization: Bearer__${admin_token}
            content-type: application/x-www-form-urlencoded; charset=UTF-8
            uri: exam/group-exam
        body:
            {
                questionNum: 1,
                totalScore: 1000,
                paperClassQuestions:[{questionId: '${danxuantiId}', score: 1000, sequence: 0, isFromSelected: 0, sortType: 1}],
                'questionDepot//3/1/1': 10,
                type: 2,
                name: '【广告配置考试】$date_time{}'
            }
    sql_statement:
    extract:
        paperId: $.id
        examName: $.name
    validate:
        -   eq:  ['$.status', '1']

-   name: 【广告配置】——新增考试-添加试卷-查询试卷信息
    request:
        url: api/v1/exam/paper-class
        method: GET
        headers:
            Authorization: Bearer__${admin_token}
            uri: exam/group-exam
        body:
           {
                paperId: '${paperId}'
           }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.status', '1']

-   name: 【广告配置】——考试发布-查询试卷信息
    request:
        url: api/v1/exam/paper-class
        method: GET
        headers:
            Authorization: Bearer__${admin_token}
            uri: exam/group-exam
        body:
            {
                paperId: '${paperId}',
                examName: '${examName}',
                businessType: 1
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.status', '1']

-   name: 【广告配置】——发布考试
    request:
        url: api/v1/exam/exam
        method: POST
        headers:
            Authorization: Bearer__${admin_token}
            content-type: application/x-www-form-urlencoded; charset=UTF-8
            uri: exam/group-exam
        body:
            {
                publish: 1,
                name: '${examName}',
                type: 3,
                allowExamTimes: 1,
                startTime: '$diy_time{*, *, *, *, *}',
                endTime: '$diy_time{*, *, +1, *, *}',
                duration: 60,
                isCreditNeedPass: 1,
                examNotes: '请考生仔细阅读，并参照执行，如遇特殊情况，请联系监考老师或拨打客服电话。',
                organizationId-text: '${organizationName}',
                organizationId: '${organizationId}',
                publisherId: '${adminId}',
                publishOrganizationId: '${organizationId}',
                isCredit: 1,
                supportApp: '1',
                clientType: 1,
                audienceItemIds: '${studentId}',
                resourceIds: 'validatePass',
                audiences: '${studentName}',
                addItems: [{"joinId": "${studentId}","joinType": 5,"joinName": "${studentName}"}],
                emptyFlag: 0,
                needApplicant: 0,
                sendToCenter: 1,
                applicantNeedAudit: 0,
                isAllowSwitch: 0,
                faceMode: 0,
                faceFailedRule: 0,
                isSetAccessSecret: 0,
                isSetPersonalCode: 0,
                admissionTicket: 0,
                evalutionRule: '{"passLess": 6,"passGreater": 8,"goodLess": 8,"goodGreater": 9,"excellentLess": 9,"noPassGreater": 6}',
                paperClassId: '${paperId}',
                paperSortRule: 1,
                paperShowRule: 2,
                rule: 6,
                paperViewRule: 1,
                parsingViewRule: 2,
                isShowAnswerImmed: 2,
                showAnswerRule: 1,
                hasCert: 0,
                virtualExamId: '${examId}',
                audienceItems: [{"joinId": "${studentId}","joinType": 5,"joinName": "${studentName}"}],
                topic: [],
                noticeUser: 0,
                noticeTeacher: 0,
                noticeInvigilator: 0,
                website: '${organizationName}'
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.supportApp', '1']

-   name: 【广告配置】——查询广告
    request:
        url: api/v1/exam/banner/page
        method: GET
        headers:
          Authorization: Bearer__${admin_token}
          uri: exam/banners
        body:
            {
              page: 1,
              pageSize: 10
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.recordCount', '1']
        -   eq:  ['$.items[0].title', '${ent_name}广告']

-   name: 【广告配置】——查询授权组织
    request:
        url: api/v1/system/organization/granted-organization
        method: GET
        headers:
          Authorization: Bearer__${admin_token}
          uri: exam/banners
        body:
            {
              uri: 'exam/banners',
              supportMore: 'true'
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.[0].status]', '1']

-   name: 【广告配置】——查询组织操作类型
    request:
        url: api/v1/system/grant/find-organization-operatortype
        method: GET
        headers:
          Authorization: Bearer__${admin_token}
          uri: exam/banners
        body:
            {
              uri: 'exam/banners'
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.${organizationId},', '0,1,2,3,4']

-   name: 【广告配置】——新增广告-上传广告封面
    request:
        url: api/v1/human/file/upload
        method: POST
        headers:
          Authorization: Bearer__${admin_token}
        body:
        files:
            {
              file: 'exam/广告封面.jpg'
            }
    sql_statement:
    extract:
          path: '$.[0].path'
          attachmentId: '$.[0].id'
    validate:
        -   eq:  ['$.[0].filename,', 'jpg']

-   name: 【广告配置】——新增广告-添加考试-获取认证考试
    request:
        url: api/v1/exam/exam/exam-select
        method: GET
        headers:
          Authorization: Bearer__${admin_token}
          uri: exam/banners
        body:
            {
              uri: 'exam/banners',
              examType: 2,
              page: 1,
              pageSize: 10
            }
    sql_statement:
    extract:
        examUrl: '$.items[0].id'
    validate:
        -   eq:  [Status Code, 200]

-   name: 【广告配置】——新增广告-广告保存
    request:
        url: api/v1/exam/banner
        method: POST
        headers:
          Authorization: Bearer__${admin_token}
          uri: exam/banners
        body:
            {
              title: '${ent_name}广告1',
              path: '${path}',
              attachmentId: '${attachmentId}',
              url: '${ent_url}/#/exam/exam/exam-detail/${examUrl}',
              status: 0,
              organizationId: '${organizationId}'
            }
    sql_statement:
    extract:
        bannersId: '$.id'
        bannersTitle: '$.title'
    validate:
        -   eq:  ['$.status,', '0']

-   name: 【广告配置】——广告发布
    request:
        url: api/v1/exam/banner/publish/${bannersId}
        method: PUT
        headers:
          Authorization: Bearer__${admin_token}
          uri: exam/banners
          content-type: application/x-www-form-urlencoded; charset=UTF-8
        body:
            {
              id: '${bannersId}',
              title: '${bannersTitle}'
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.id,', '${bannersId}']
        -   eq:  ['$.status,', '1']

-   name: 【广告配置】——广告排序
    request:
        url: api/v1/exam/banner/sort/${bannersId}
        method: PUT
        headers:
          Authorization: Bearer__${admin_token}
          uri: exam/banners
          content-type: application/x-www-form-urlencoded; charset=UTF-8
        body:
            {
              id: '${bannersId}',
              sort: '2',
              title: '${ent_name}广告2'
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.id,', '${bannersId}']
        -   eq:  ['$.sort,', '2']

-   name: 【广告配置】——广告撤销
    request:
        url: api/v1/exam/banner/revoke/${bannersId}
        method: PUT
        headers:
          Authorization: Bearer__${admin_token}
          uri: exam/banners
          content-type: application/x-www-form-urlencoded; charset=UTF-8
        body:
            {
              id: '${bannersId}',
              title: '${bannersTitle}'
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.id,', '${bannersId}']
        -   eq:  ['$.status,', '0']

-   name: 【广告配置】——广告修改
    request:
        url: api/v1/exam/banner/${bannersId}
        method: PUT
        headers:
          Authorization: Bearer__${admin_token}
          uri: exam/banners
          content-type: application/x-www-form-urlencoded; charset=UTF-8
        body:
            {
              title: '${ent_name}广告2',
              path: '${path}',
              attachmentId: '${attachmentId}',
              id: '${bannersId}',
              status: 0
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.title,', '${ent_name}广告2']
        -   eq:  ['$.status,', '0']

-   name: 【广告配置】——广告删除
    request:
        url: api/v1/exam/banner/${bannersId}
        method: DELETE
        headers:
          Authorization: Bearer__${admin_token}
          uri: exam/banners
          content-type: application/x-www-form-urlencoded; charset=UTF-8
        body:
            {
              id: '${bannersId}',
              title: '${ent_name}广告2'
            }
    sql_statement:
    extract:
    validate:
        -   eq:  ['$.id,', '${bannersId}']
